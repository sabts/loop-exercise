//1Ô∏è‚É£ Camila est√° revisando una lista de nombres, (por ejemplo: ['Pedro', 'Ana', 'Luis', 'Elena', 'Sof√≠a']). Debe imprimir cada nombre en may√∫sculas, uno por l√≠nea.
//PEDRO
//ANA
//LUIS
//ELENA
//SOF√çA
const names = ["Pedro", "Ana", "Luis", "Elena", "Sof√≠a"];
const nameListCheeker = () => {
  for (name of names) {
    console.log(name.toUpperCase());
  }
};
nameListCheeker();

//2Ô∏è‚É£ Bego tiene un array con precios. Debe sumar todos los precios usando un bucle for y mostrar el total.
//Ejemplo entrada: [23, 78, 45]
//Ejemplo salida: Total: 146
const prices = [23, 78, 45];

const priceSumTotal = () => {
  let sumtotal = 0;
  for (let i = 0; i < prices.length; i++) {
    sumtotal = sumtotal + prices[i];//tiene que ir dentro de {  }
  }
  console.log(sumtotal);
};
priceSumTotal();

//3Ô∏è‚É£ Macarena quiere generar tres c√≥digos de seguridad y almacenarlos en un array. Cada c√≥digo debe ser un n√∫mero aleatorio entre 1000 y 9999. Usa un bucle for para generar los c√≥digos y luego mostrarlos.
//Ejemplo salida: [4356, 7890, 1234]
const threeDigitSecurityCode = () => {
  const codes = [];
for(let i = 0; i < 3; i++){
  code = Math.floor(Math.random()*9000) + 1000
  codes.push(code)
}
console.log(codes)
}
threeDigitSecurityCode()

//4Ô∏è‚É£ Abby encontr√≥ una lista de suministros en un refugio: ['Agua', 'Munici√≥n', 'Botiqu√≠n', 'Czst']. Debe comprobar si todos los elementos contienen al menos una vocal.
//Ejemplo salida:
//Agua contiene vocales.
//Munici√≥n contiene vocales.
//Botiqu√≠n contiene vocales.
//Czst no contiene vocales.
const shelterSupplyList = () => {
  const supplyList =  ['Agua', 'Munici√≥n', 'Botiqu√≠n', 'Czst']
  const vowel = "aeiou"
  for(let i=0; i < supplyList.length; i++){
    if(vowel.includes(supplyList[i])) {
      console.log(`${supplyList[i]} contiene vocales.`)
    } else {
      console.log(`${supplyList[i]} no contiene vocales.`)
    }
  }  
}
shelterSupplyList()

//5Ô∏è‚É£ Bego est√° calculando precios con descuento. Tiene un array con precios, (por ejemplo [150, 300, 50]). Si el precio es mayor a 100, aplica un 20% de descuento, si no, un 10%. Usa un bucle para mostrar cada precio original, descuento aplicado y precio final.
//Ejemplo salida:
//Precio original: 150 - Descuento aplicado: 30 - Precio final: 120
//Precio original: 300 - Descuento aplicado: 60 - Precio final: 240
//Precio original: 50 - Descuento aplicado: 5 - Precio final: 45
  const discountCalculator = (originalPrices) => {
    for (const price of originalPrices) {
      const discount = price > 100 ? price * 0.2 : price * 0.1;
      const finalPrice = price - discount;
      console.log(`Precio original: ${price} - Descuento aplicado: ${discount} - Precio final: ${finalPrice}`);
    }
  };
  discountCalculator([150, 300, 50]);

//7Ô∏è‚É£ Sabrina quiere verificar cu√°ntos n√∫meros aleatorios generados entre 1 y 100 son m√∫ltiplos de 3. Haz una funci√≥n que haga esta comprobaci√≥n con 10 n√∫meros.
//Ejemplo salida:
//N√∫meros generados: [12, 35, 75, 9, 27, 4, 6, 88, 15, 3]
//M√∫ltiplos de 3 encontrados: 7
const multiplesOf3Checker = () =>{
  numbersGenerated = [];
  multiplesOf3 = 0;

  for (let i = 0; i < 10; i++) {
    const number = Math.floor(Math.random() * 100) + 1;
    numbersGenerated.push(number);

    if(number % 3 === 0){multiplesOf3 = multiplesOf3 + 1}
  }
  console.log(`N√∫meros generados: ${numbersGenerated}`);//colocar de ultimo el log para que no me haga una cadena de numeros alealtorios
  console.log(`M√∫ltiplos de 3 encontrados: ${multiplesOf3}`);
}
multiplesOf3Checker()

//8Ô∏è‚É£ Macarena tiene un array con tres nombres y debe crear un array nuevo con las iniciales de cada nombre en may√∫sculas usando un bucle.
//Ejemplo entrada: ['Pedro', 'Ana', 'Luis']
//Ejemplo salida: ['P', 'A', 'L']
const namesInitals = (names) => {
  const initials = []
  for (i = 0; i < names.length; i++)
    initials.push(names[i][0].toUpperCase())

console.log(initials)
}
namesInitals(['Pedro', 'Ana', 'Luis'])

//9Ô∏è‚É£ Abby est√° revisando mensajes cifrados. Tiene un array con palabras (cantidad y palabras a tu elecci√≥n) que deben invertirse y mostrarse en min√∫sculas. Usa un bucle para procesarlas todas. Investiga sobre las funciones split(), reverse() y join()
//Ejemplo entrada: ['FUEGO', 'REFUGIO', 'SUMINISTROS']
//Ejemplo salida: ['oguef', 'oiguref', 'sotsinimus']
const cheekingCodedMessages = () =>{
const codeMessages = ['FUEGO', 'REFUGIO', 'SUMINISTROS'];
for(const message of codeMessages){
  const reverseMessage = message.toLowerCase().split('').reverse().join('');
  console.log(reverseMessage)}
}
cheekingCodedMessages()

//üîü Camila quiere generar un c√≥digo de acceso combinando letras aleatorias y n√∫meros. Usa un bucle para crear un string aleatorio de 6 caracteres sacados de 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.
//Ejemplo salida: 'A3P9K8'
const generateALoginCode = () =>{
const alphabetandNumbers = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
let randomCode = [];
for(let i = 0; i < 6; i++){
  const randomCombination = Math.floor(Math.random() * alphabetandNumbers.length);
  randomCode.push(alphabetandNumbers[randomCombination]);
}
console.log(randomCode.join(''));
}
generateALoginCode()

//1Ô∏è‚É£1Ô∏è‚É£ Macarena quiere crear un sistema que genere combinaciones de nombres y apellidos. Tiene dos arrays: ['Juan', 'Ana', 'Luis'] y ['P√©rez', 'Mart√≠nez', 'Garc√≠a']. Debe generar todos los nombres posibles combinando uno de cada array.
//Ejemplo salida:
//Juan P√©rez
//Juan Mart√≠nez
//Juan Garc√≠a
//Ana P√©rez
//Ana Mart√≠nez
//Ana Garc√≠a
//Luis P√©rez
//Luis Mart√≠nez
//Luis Garc√≠a